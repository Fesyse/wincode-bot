import { db } from "@/db"
import { env } from "@/env"
import { Markup, Telegraf } from 'telegraf'
import LocalSession from "telegraf-session-local"
import { autopost } from "./autoposting"
import { groups } from "./db/schema"
import { Session } from "./types"

export const bot = new Telegraf(env.BOT_TOKEN) 
const sessions = new LocalSession({ database: "session_db.json" })
const autopostings = new Map<string, NodeJS.Timeout>()

bot.use(sessions.middleware())

bot.start(async ctx => {
	const chat = ctx.update.message.chat

	if (chat.type === "private") {
		return ctx.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º, –µ—Å–ª–∏ –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç.", 
			Markup.inlineKeyboard([
				Markup.button.callback("üö™ –í–æ–π—Ç–∏", "login")], 
				{ columns: 1 }
			)
		)
	}

	const group = await db.query.groups.findFirst({
		where: (groupTable, { eq }) => eq(groupTable.id, chat.id.toString()),
	})

	if (group) return ctx.replyWithHTML("–£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞!")

	await db.insert(groups).values({
		id: chat.id.toString(),
		name: "title" in chat ? chat.title : "UNTITLED",
	})

	return ctx.replyWithHTML("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ª–µ–∫—Ü–∏–∏ –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <code>/add_lesson</code>.")
})

// Autoposting

bot.command("start_autoposting", async ctx => {
	const chat = ctx.update.message.chat
	const group = await db.query.groups.findFirst({
		with: {
			lessons: true
		},
		where: (groupTable, { eq }) => eq(groupTable.id, chat.id.toString()),
	})

	if (!group) 
		return ctx.replyWithHTML("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <code>/start</code>!")

	if (group.lessons.length === 0) 
		return ctx.replyWithHTML("–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ª–µ–∫—Ü–∏–π, –¥–æ–±–∞–≤—å—Ç–µ –ª–µ–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <code>/add_lesson</code>!")

	const autoposting = autopost({
		ctx,
		lessons: group.lessons,
	})

	autopostings.set(chat.id.toString(), autoposting)

	ctx.reply("–ê–≤—Ç–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!")
})

bot.command("stop_autoposting", ctx => {
	const message = ctx.update.message

	const chatId = message.chat.id.toString()
	const posting = autopostings.get(chatId)
	
	if (!posting) 
		return ctx.replyWithHTML("–ê–≤—Ç–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ!")
	
	clearInterval(posting)
	autopostings.delete(chatId)

	ctx.reply("–ê–≤—Ç–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")
})

// Admin commands

bot.hears("login", ctx => {	
	if (ctx.update.message.chat.type !== "private")
		return ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")

	ctx.session.type = "login_username"
	ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
})

bot.command("add_lesson", ctx => {
	if (ctx.update.message.chat.type !== "private")
		return ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
})

bot.on("text", ctx => {
	const session = (ctx as unknown as { session: Session }).session

	if (session.type === "login_username") {
		console.log(ctx.message.text)
		ctx.session.username = "ctx.message.text"
		
		ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
		ctx.session.type = "login_password"
	}
})

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// Bot Launch
bot.launch();

